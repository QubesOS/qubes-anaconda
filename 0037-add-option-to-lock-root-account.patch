From 403ba9b26d990756dc36034e12d91cc9c7b554bf Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fr=C3=A9d=C3=A9ric=20Pierret=20=28fepitre=29?=
 <frederic.epitre@orange.fr>
Date: Tue, 25 Dec 2018 21:46:38 +0100
Subject: [PATCH] add option to lock root account

Not only default setting, so one could leave account locked if entered
password setting spoke.
---
 pyanaconda/ui/gui/spokes/root_password.glade | 24 +++++++++++++++----
 pyanaconda/ui/gui/spokes/root_password.py    | 25 ++++++++++++++------
 2 files changed, 38 insertions(+), 11 deletions(-)

diff --git a/pyanaconda/ui/gui/spokes/root_password.glade b/pyanaconda/ui/gui/spokes/root_password.glade
index 64f4c926f..0d61ea31c 100644
--- a/pyanaconda/ui/gui/spokes/root_password.glade
+++ b/pyanaconda/ui/gui/spokes/root_password.glade
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!-- Generated with glade 3.19.0 -->
+<!-- Generated with glade 3.22.1 -->
 <interface>
   <requires lib="gtk+" version="3.6"/>
   <requires lib="AnacondaWidgets" version="1.0"/>
@@ -40,6 +40,22 @@
               <object class="GtkBox" id="AnacondaSpokeWindow-action_area1">
                 <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
+                <child>
+                  <object class="GtkCheckButton" id="lock">
+                    <property name="label" translatable="yes">Lock root account</property>
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="receives_default">False</property>
+                    <property name="halign">start</property>
+                    <property name="draw_indicator">True</property>
+                    <signal name="clicked" handler="on_lock_clicked" swapped="no"/>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
                 <child>
                   <object class="GtkGrid" id="pwgrid">
                     <property name="visible">True</property>
@@ -81,7 +97,7 @@
                         <property name="visibility">False</property>
                         <property name="invisible_char">●</property>
                         <signal name="changed" handler="on_password_changed" swapped="no"/>
-                        <signal name="icon_release" handler="on_password_icon_clicked" swapped="no"/>
+                        <signal name="icon-release" handler="on_password_icon_clicked" swapped="no"/>
                         <child internal-child="accessible">
                           <object class="AtkObject" id="password_entry-atkobject">
                             <property name="AtkObject::accessible-name" translatable="yes">Password</property>
@@ -101,7 +117,7 @@
                         <property name="invisible_char">●</property>
                         <property name="activates_default">True</property>
                         <signal name="changed" handler="on_password_confirmation_changed" swapped="no"/>
-                        <signal name="icon_release" handler="on_password_icon_clicked" swapped="no"/>
+                        <signal name="icon-release" handler="on_password_icon_clicked" swapped="no"/>
                         <child internal-child="accessible">
                           <object class="AtkObject" id="password_confirmation_entry-atkobject">
                             <property name="AtkObject::accessible-name" translatable="yes">Confirm Password</property>
@@ -175,7 +191,7 @@
                   <packing>
                     <property name="expand">False</property>
                     <property name="fill">True</property>
-                    <property name="position">0</property>
+                    <property name="position">1</property>
                   </packing>
                 </child>
               </object>
diff --git a/pyanaconda/ui/gui/spokes/root_password.py b/pyanaconda/ui/gui/spokes/root_password.py
index e6a4020a3..d6792ab1c 100644
--- a/pyanaconda/ui/gui/spokes/root_password.py
+++ b/pyanaconda/ui/gui/spokes/root_password.py
@@ -72,6 +72,7 @@ class PasswordSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler)
         self._password_confirmation_entry = self.builder.get_object("password_confirmation_entry")
         self._password_bar = self.builder.get_object("password_bar")
         self._password_label = self.builder.get_object("password_label")
+        self._lock = self.builder.get_object("lock")
 
         # set state based on kickstart
         # NOTE: this will stop working once the module supports multiple kickstart commands
@@ -141,11 +142,15 @@ class PasswordSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler)
 
     def refresh(self):
         # focus on the password field if password was not kickstarted
-        if not self.password_kickstarted:
+        if not self.password_kickstarted or not self._lock.get_active():
             self.password_entry.grab_focus()
 
-        # rerun checks so that we have a correct status message, if any
-        self.checker.run_checks()
+        self._lock.set_active(self._users_module.proxy.IsRootAccountLocked)
+        self.on_lock_clicked(self._lock)
+
+        if not self._lock.get_active():
+            # rerun checks so that we have a correct status message, if any
+            self.checker.run_checks()
 
     @property
     def status(self):
@@ -154,7 +159,7 @@ class PasswordSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler)
             reconfig_mode = self._services_module.proxy.SetupOnBoot == constants.SETUP_ON_BOOT_RECONFIG
             # reconfig mode currently allows re-enabling a locked root account if
             # user sets a new root password
-            if reconfig_mode:
+            if reconfig_mode and not self._lock.get_active():
                 return _("Disabled, set password to enable.")
             else:
                 return _("Root account is disabled.")
@@ -177,7 +182,7 @@ class PasswordSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler)
         self._users_module.proxy.SetRootpwKickstarted(False)
         self.password_kickstarted = False
 
-        self._users_module.proxy.SetRootAccountLocked(False)
+        self._users_module.proxy.SetRootAccountLocked(self._lock.get_active())
 
         if not pw:
             self._users_module.proxy.ClearRootPassword()
@@ -213,7 +218,7 @@ class PasswordSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler)
         unwaivable_check_failed = not self._confirm_check.result.success
 
         # set appropriate status bar message
-        if not error_message:
+        if not error_message or self._lock.get_active():
             # all is fine, just clear the message
             self.clear_info()
         elif not self.password and not self.password_confirmation:
@@ -297,7 +302,13 @@ class PasswordSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler)
 
     def on_back_clicked(self, button):
         # the GUI spoke input check handler handles the spoke exit logic for us
-        if self.try_to_go_back():
+        if self.try_to_go_back() or self._lock.get_active():
             NormalSpoke.on_back_clicked(self, button)
         else:
             log.info("Return to hub prevented by password checking rules.")
+
+    def on_lock_clicked(self, lock):
+        self.password_entry.set_sensitive(not lock.get_active())
+        self.password_confirmation_entry.set_sensitive(not lock.get_active())
+        if not lock.get_active():
+            self.password_entry.grab_focus()
-- 
2.17.2

